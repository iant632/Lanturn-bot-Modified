from discord.ext import tasks, commands
import discord
import datetime
import numpy as np
from framecalc import *
from seedgen import *
from GetPokeInfo import *
from bot import *
from Language import *
from datetime import date
from Person import *
from ArrayQueue import *
import time
import codecs
import linecache
import sys

# 300 with the current queue and the reporting system
# will make sure everyone has a place and can see when they will be served
# q = ArrayQueue(300)

# until possible merge and improvement, setting it to 20 as from the previous commits
q = ArrayQueue(40)

class RaidCommands(commands.Cog):
	def __init__(self, client):
		self.checkDataReady.start()
		self.userChannel1 = None
		self.user1 = None
		self.id1 = 0
		self.person1 = None
		self.idInt1 = None
		self.userChannel2 = None
		self.user2 = None
		self.id2 = 0
		self.person2 = None
		self.idInt2 = None
		self.testMode = False
		self.msg1 = None
		self.msg2 = None
		self.language1 = None
		self.language2 = None

	#Clears instance variables
	def clearData1(self):
		self.userChannel1 = None
		self.user1 = None
		self.id1 = 0
		self.idInt1 = None
		self.person1 = None
		self.ifdetailed1 = None
		self.msg1 = None
		self.language1 = None

	def clearData2(self):
		self.userChannel2 = None
		self.user2 = None
		self.id2 = 0
		self.person2 = None
		self.idInt2 = None
		self.ifdetailed2 = None
		self.msg2 = None
		self.language2 = None

	def PrintException(self):
		exc_type, exc_obj, tb = sys.exc_info()
		f = tb.tb_frame
		lineno = tb.tb_lineno
		filename = f.f_code.co_filename
		linecache.checkcache(filename)
		line = linecache.getline(filename, lineno, f.f_globals)
		print('EXCEPTION IN ({}, LINE {} "{}"): {}'.format(filename, lineno, line.strip(), exc_obj))

	def getLanguageText(self, language, index_number):
		if language == 0:
			with codecs.open( "Korean.txt", "r", "utf-8" ) as file:
				DesiredText = file.readlines()

		if language == 1:
			with codecs.open( "English.txt", "r", "utf-8" ) as file:
				DesiredText = file.readlines()

		if language == 2:
			with codecs.open( "Japanese.txt", "r", "utf-8" ) as file:
				DesiredText = file.readlines()

		return DesiredText[index_number].replace("\r\n", "")

	#Generates the appropriate string based on your star and square frames
	def generateFrameString(self, starFrame, squareFrame, language):
		starFrameMessage = ""
		if starFrame != -1:
			starFrameMessage = str(starFrame + 1)
		else:
			starFrameMessage = self.getLanguageText(language, 42)

		squareFrameMessage = ""
		if squareFrame != -1:
			squareFrameMessage = str(squareFrame + 1)
		else:
			squareFrameMessage = self.getLanguageText(language, 43)

		return starFrameMessage, squareFrameMessage

	#나온 결과값인 0, 1, 2에 따라 텍스트를 설정함.
	def generateAbilityString(self, star, square):
		starMessage = ""
		if star == 0:
			starMessage = "1번 특성이 나오는 굴입니다."
		elif star == 1:
			starMessage = "2번 특성이 나오는 굴입니다."
		elif star == 2:
			starMessage = "숨겨진 특성이 나올 수 있는 굴입니다."
		else:
			starMessage = "너무 멀어서 계산이 되지 않네요 :("

		squareMessage = ""
		if square == 0:
			squareMessage = "1번 특성이 나오는 굴입니다."
		elif square == 1:
			squareMessage = "2번 특성이 나오는 굴입니다."
		elif square == 2:
			squareMessage = "숨겨진 특성이 나올 수 있는 굴입니다."
		else:
			squareMessage = "너무 멀어서 계산이 되지 않네요 :("

		return starMessage, squareMessage

	async def addList(self, ctx, number, language):
		global q

		if q.availableSpace():
			print("Invoked by: " + str(ctx.message.author) + " in: " + str(ctx.message.guild))
			if ctx.message.guild != None:

				#신청을 시도하는 사람의 데이터를 모음.
				id = ctx.message.author.id
				#Person(id, channel, author, 0) 0은 일반적인 시드체크를 의미함.
				p = Person(id, ctx.message.channel, ctx.message.author, number, language)

				#Checks if queue already contains assets from the constructed person object
				if not q.contains(p) and self.idInt1 != id and self.idInt2 != id:
					#현재 봇이 켜져있고, 제공되는 사람이 없는지 확인합니다.
					var1 = self.person1 == None and q.size() == 0 and is1on()
					var2 = self.person2 == None and q.size() == 0 and is2on()
					if var1 or var2:
						q.enqueue(p)
						await ctx.send(str(ctx.message.author.display_name) + self.getLanguageText(language, 1))

					#현재 리스트에 신청자가 없는지 확인합니다.
					else:
						q.enqueue(p)
						await ctx.send(str(ctx.message.author.display_name) + self.getLanguageText(language, 2) + str(q.size()) + self.getLanguageText(language, 3))

					#현재 서비스를 받는 사람입니다.
				elif self.idInt1 == id or self.idInt2== id:
					await ctx.send(self.getLanguageText(language, 4))

				else:
					place = q.size() - q.indexOf(p)
					await ctx.send(self.getLanguageText(language, 5) + str(place) + self.getLanguageText(language, 6))
		else:
			await ctx.send(self.getLanguageText(language, 7))

	async def sendList(self, ctx, language):
		global q
		list_text = self.getLanguageText(language, 8) + "```\n"
		if self.user1 != None:
			list_text += "\n" + self.getLanguageText(language, 9) + self.user1.display_name
		else:
			if is1on():
				list_text += "\n" + self.getLanguageText(language, 10)
			else:
				list_text += "\n" + self.getLanguageText(language, 11)

		if self.user2 != None:
			list_text += "\n" + self.getLanguageText(language, 12) + self.user2.display_name
		else:
			if is2on():
				list_text += "\n" + self.getLanguageText(language, 13)
			else:
				list_text += "\n" + self.getLanguageText(language, 14)

		list_text += q.sendList(language)

		await ctx.send(list_text)

	async def cancelQueue(self, ctx, language):
		global q

		if ctx.message.guild != None:

			#현재 취소를 신청하는 사람의 정보를 모음
			id = ctx.message.author.id
			p = Person(id, ctx.message.channel, ctx.message.author, 0, 0)

			#현재 서비스를 제공하는 중이거나, 신청하지 않은 경우 출력합니다.
			if self.idInt1 == id:
				if is1on():
					await ctx.send(self.getLanguageText(language, 15))

			elif self.idInt2 == id:
				if is2on():
					await ctx.send(self.getLanguageText(language, 15))

			elif not q.contains(p):
				await ctx.send(self.getLanguageText(language, 16))

			else:
				q.removeQueue(p)
				await ctx.send(str(ctx.message.author.display_name) + self.getLanguageText(language, 17))

	def getDateString(self, starFrame, squareFrame, date_pk, language):
		if starFrame != -1:
			if starFrame > 3:
				delta_star = datetime.timedelta(days=starFrame - 3)
				date_star = date_pk + delta_star
				stardateString = date_star.strftime(self.getLanguageText(language, 44))

			elif starFrame == 3:
				stardateString = self.getLanguageText(language, 45)

			else:
				stardateString = self.getLanguageText(language, 46)

		else:
			stardateString = self.getLanguageText(language, 47)

		if squareFrame != -1:
			if squareFrame > 3:
				delta_square = datetime.timedelta(days=squareFrame - 3)
				date_square = date_pk + delta_square
				squaredateString = date_square.strftime(self.getLanguageText(language, 44))

			elif squareFrame == 3:
				squaredateString = self.getLanguageText(language, 48)

			else:
				squaredateString = self.getLanguageText(language, 49)

		else:
			squaredateString = self.getLanguageText(language, 50)

		return stardateString, squaredateString

	async def sendResult(self, number):
		time.sleep(2.0)
		if number == 1:
			seed, iv, pk, year, day, month, OT, isGiganta = getPokeData1()
			ifdetailed = self.ifdetailed1
			userid = self.id1
			userChannel = self.userChannel1
			msg = self.msg1
			language = self.language1
		else:
			seed, iv, pk, year, day, month, OT, isGiganta = getPokeData2()
			ifdetailed = self.ifdetailed2
			userid = self.id2
			userChannel = self.userChannel2
			msg = self.msg2
			language = self.language2

		await msg.delete()

		if pk != 0:
			pokemon_string = getPokeString(pk, isGiganta, False, language)

			if seed != -1:	
				calc = framecalc(seed)
				starFrame, squareFrame, isStarHidden, isSquareHidden, stariv, squareiv, starnature, squarenature = calc.getShinyFrames()
				date_pk = datetime.date(year+2000, month, day)
				
				stardateString, squaredateString = self.getDateString(starFrame, squareFrame, date_pk, language)

				starFrameMessage, squareFrameMessage = self.generateFrameString(starFrame, squareFrame, language)

				if ifdetailed == 0: 
					await userChannel.send(userid + self.getLanguageText(language, 51) + pokemon_string +
						"\n" + self.getLanguageText(language, 52) + OT +
						"\n" + self.getLanguageText(language, 53) + seed[2:] + 
						"\n" + self.getLanguageText(language, 54) + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
						"\n" + self.getLanguageText(language, 55) + starFrameMessage +
						"\n" + self.getLanguageText(language, 56) + stardateString +
						"\n" + self.getLanguageText(language, 57) + squareFrameMessage +
						"\n" + self.getLanguageText(language, 58) + squaredateString +
						self.getLanguageText(language, 59) + seed[2:])

				else:
					nature_name = ["노력", "외로움", "용감", "고집", "개구쟁이", "대담", "온순", "무사태평", "장난꾸러기", "촐랑", "겁쟁이", "성급", "성실", "명랑", "천진난만", "조심", "의젓", "냉정", "수줍음", "덜렁", "차분", "얌전", "건방", "신중", "변덕"]
					starHiddenMessage, squareHiddenMessage = self.generateAbilityString(isStarHidden, isSquareHidden)

					if starFrame == -1 and squareFrame == -1:
						await userChannel.send(userid + "```포켓몬 : " + pokemon_string +
						"\n어버이 : " + OT +
						"\n시드 : " + seed[2:] + 
						"\n개체값: " + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
						"\n최초의 이로치 프레임 : 이로치 시드가 10000보다 커요!" + 
						"```자세한 건 이 사이트에서 확인이 가능해요! https://iant.kr/seedchecker?seed=" + seed[2:] + "\n공지는 항상 읽어주세요 :)")

					elif starFrame != -1 and squareFrame == -1:

						await userChannel.send(userid + "```포켓몬 : " + pokemon_string +
							"\n어버이 : " + OT +
							"\n시드 : " + seed[2:] + 
							"\n개체값: " + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
							"\n최초의 이로치 프레임 : " + starFrameMessage +
							"\n이로치 종류 : 별로치" +
							"\n별로치 저장해야되는 날짜 : " + stardateString +
							"\n별로치 특성 : " + starHiddenMessage +
							"\n5성 기준 별로치 개체값: " + str(stariv[0]) + "/" + str(stariv[1]) + "/" + str(stariv[2]) + "/" + str(stariv[3]) + "/" + str(stariv[4]) + "/" + str(stariv[5]) + 
							"\n별로치 성격 : " + nature_name[starnature] +
							"```자세한 건 이 사이트에서 확인이 가능해요! https://iant.kr/seedchecker?seed=" + seed[2:] + "\n공지는 항상 읽어주세요 :)")

					elif starFrame < squareFrame and starFrame != -1:

						await userChannel.send(userid + "```포켓몬 : " + pokemon_string +
							"\n어버이 : " + OT +
							"\n시드 : " + seed[2:] + 
							"\n개체값: " + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
							"\n최초의 이로치 프레임 : " + starFrameMessage +
							"\n이로치 종류 : 별로치" +
							"\n별로치 저장해야되는 날짜 : " + stardateString +
							"\n별로치 특성 : " + starHiddenMessage +
							"\n5성 기준 이로치 개체값: " + str(stariv[0]) + "/" + str(stariv[1]) + "/" + str(stariv[2]) + "/" + str(stariv[3]) + "/" + str(stariv[4]) + "/" + str(stariv[5]) + 
							"\n별로치 성격 : " + nature_name[starnature] +
							"```자세한 건 이 사이트에서 확인이 가능해요! https://iant.kr/seedchecker?seed=" + seed[2:] + "\n공지는 항상 읽어주세요 :)")

					else:

						await userChannel.send(userid + "```포켓몬 : " + pokemon_string +
							"\n어버이 : " + OT +
							"\n시드 : " + seed[2:] + 
							"\n개체값: " + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
							"\n최초의 이로치 프레임 : " + squareFrameMessage +
							"\n이로치 종류 : 미로치" +
							"\n미로치 저장해야되는 날짜 : " + squaredateString +
							"\n미로치 특성 : " + squareHiddenMessage +
							"\n5성 기준 미로치 개체값: " + str(squareiv[0]) + "/" + str(squareiv[1]) + "/" + str(squareiv[2]) + "/" + str(squareiv[3]) + "/" + str(squareiv[4]) + "/" + str(squareiv[5]) + 
							"\n미로치 성격 : " + nature_name[squarenature] +
							"```자세한 건 이 사이트에서 확인이 가능해요! https://iant.kr/seedchecker?seed=" + seed[2:] + "\n공지는 항상 읽어주세요 :)")

				#self.writeStat(self.person1, pk, starFrame, squareFrame)

				#outputs how many people remain in line
				time.sleep(1.0)
				await userChannel.send(self.getLanguageText(language, 60) + str(q.size()) + self.getLanguageText(language, 61))

			else:
				await userChannel.send(userid + self.getLanguageText(language, 62) + OT + self.getLanguageText(language, 63) + pokemon_string + self.getLanguageText(language, 64) + str(q.size()) + self.getLanguageText(language, 65))

			return 0
		else:
			await userChannel.send(userid + self.getLanguageText(language, 66) + str(q.size()) + self.getLanguageText(language, 67))
			return 0
		
	async def sendResult2(self, number):
		time.sleep(2.0)
		if number == 1:
			pk, exp, Dlevel, shiny, nature, statnature, iv, ev, move, item, OT, TID, SID, isGiganta, ability, gender, isEgg, PID, EC = getPokeInfo1()
			userChannel = self.userChannel1
			userid = self.id1
			msg = self.msg1
			language = self.language1
		else:
			pk, exp, Dlevel, shiny, nature, statnature, iv, ev, move, item, OT, TID, SID, isGiganta, ability, gender, isEgg, PID, EC = getPokeInfo2()
			userChannel = self.userChannel2
			userid = self.id2
			msg = self.msg2
			language = self.language2

		await msg.delete()

		if pk != 0:

			pokemon_string = getPokeString(pk, isGiganta, isEgg, language)
			shiny_name = ["X", "☆", "◇"]
			gender_name = ["수컷", "암컷", "무성"]
			nature_name = ["노력", "외로움", "용감", "고집", "개구쟁이", "대담", "온순", "무사태평", "장난꾸러기", "촐랑", "겁쟁이", "성급", "성실", "명랑", "천진난만", "조심", "의젓", "냉정", "수줍음", "덜렁", "차분", "얌전", "건방", "신중", "변덕"]
			ability_name = ["-", "악취", "잔비", "가속", "전투무장", "옹골참", "습기", "유연", "모래숨기", "정전기", "축전", "저수", "둔감", "날씨부정", "복안", "불면", "변색", "면역", "타오르는불꽃", "인분", "마이페이스", "흡반", "위협", "그림자밟기", "까칠한피부", "불가사의부적", "부유", "포자", "싱크로", "클리어바디", "자연회복", "피뢰침", "하늘의은총", "쓱쓱", "엽록소", "발광", "트레이스", "천하장사", "독가시", "정신력", "마그마의무장", "수의베일", "자력", "방음", "젖은접시", "모래날림", "프레셔", "두꺼운지방", "일찍기상", "불꽃몸", "도주", "날카로운눈", "괴력집게", "픽업", "게으름", "의욕", "헤롱헤롱바디", "플러스", "마이너스", "기분파", "점착", "탈피", "근성", "이상한비늘", "해감액", "심록", "맹화", "급류", "벌레의알림", "돌머리", "가뭄", "개미지옥", "의기양양", "하얀연기", "순수한힘", "조가비갑옷", "에어록", "갈지자걸음", "전기엔진", "투쟁심", "불굴의마음", "눈숨기", "먹보", "분노의경혈", "곡예", "내열", "단순", "건조피부", "다운로드", "철주먹", "포이즌힐", "적응력", "스킬링크", "촉촉바디", "선파워", "속보", "노말스킨", "스나이퍼", "매직가드", "노가드", "시간벌기", "테크니션", "리프가드", "서투름", "틀깨기", "대운", "유폭", "위험예지", "예지몽", "천진", "색안경", "필터", "슬로스타트", "배짱", "마중물", "아이스바디", "하드록", "눈퍼뜨리기", "꿀모으기", "통찰", "이판사판", "멀티타입", "플라워기프트", "나이트메어", "나쁜손버릇", "우격다짐", "심술꾸러기", "긴장감", "오기", "무기력", "저주받은바디", "치유의마음", "프렌드가드", "깨어진갑옷", "헤비메탈", "라이트메탈", "멀티스케일", "독폭주", "열폭주", "수확", "텔레파시", "변덕쟁이", "방진", "독수", "재생력", "부풀린가슴", "모래헤치기", "미라클스킨", "애널라이즈", "일루전", "괴짜", "틈새포착", "미라", "자기과신", "정의의마음", "주눅", "매직미러", "초식", "짓궂은마음", "모래의힘", "철가시", "달마모드", "승리의별", "터보블레이즈", "테라볼티지", "아로마베일", "플라워베일", "볼주머니", "변환자재", "퍼코트", "매지션", "방탄", "승기", "옹골찬턱", "프리즈스킨", "스위트베일", "배틀스위치", "질풍날개", "메가런처", "풀모피", "공생", "단단한발톱", "페어리스킨", "미끈미끈", "스카이스킨", "부자유친", "다크오라", "페어리오라", "오라브레이크", "시작의바다", "끝의대지", "델타스트림", "지구력", "도망태세", "위기회피", "꾸덕꾸덕굳기", "무도한행동", "리밋실드", "잠복", "수포", "강철술사", "발끈", "눈치우기", "원격", "촉촉보이스", "힐링시프트", "일렉트릭스킨", "서핑테일", "어군", "탈", "유대변화", "스웜체인지", "부식", "절대안깸", "여왕의위엄", "내용물분출", "무희", "배터리", "복슬복슬", "비비드바디", "소울하트", "컬리헤어", "리시버", "과학의힘", "비스트부스트", "AR시스템", "일렉트릭메이커", "사이코메이커", "미스트메이커", "그래스메이커", "메탈프로텍트", "스펙터가드", "프리즘아머", "브레인포스", "불요의검", "불굴의방패", "리베로", "볼줍기", "솜털", "스크루지느러미", "미러아머", "그대로꿀꺽미사일", "굳건한신념", "증기기관", "펑크록", "모래뿜기", "얼음인분", "숙성", "아이스페이스", "파워스폿", "의태", "배리어프리", "강철정신", "멸망의바디", "떠도는영혼", "무아지경", "화학변화가스", "파스텔베일", "꼬르륵스위치"]
			item_name = ["없음", "마스터볼", "하이퍼볼", "수퍼볼", "몬스터볼", "사파리볼", "넷트볼", "다이브볼", "네스트볼", "리피드볼", "타이마볼", "럭셔리볼", "프레미어볼", "다크볼", "힐볼", "퀵볼", "프레셔스볼", "상처약", "해독제", "화상치료제", "얼음상태치료제", "잠깨는약", "마비치료제", "회복약", "풀회복약", "고급상처약", "좋은상처약", "만병통치제", "기력의조각", "기력의덩어리", "맛있는물", "미네랄사이다", "후르츠밀크", "튼튼밀크", "힘의가루", "힘의뿌리", "만능가루", "부활초", "PP에이드", "PP회복", "PP에이더", "PP맥스", "용암전병", "나무열매쥬스", "성스러운분말", "맥스업", "타우린", "사포닌", "알칼로이드", "리보플라빈", "이상한사탕", "포인트업", "키토산", "포인트맥스", "숲의양갱", "이펙트가드", "크리티컬커터", "플러스파워", "디펜드업", "스피드업", "잘-맞히기", "스페셜업", "스페셜가드", "삐삐인형", "에나비꼬리", "파랑비드로", "노랑비드로", "빨강비드로", "검정비드로", "하양비드로", "여울소금", "여울조개껍질", "빨강조각", "파랑조각", "노랑조각", "초록조각", "실버스프레이", "골드스프레이", "동굴탈출로프", "벌레회피스프레이", "태양의돌", "달의돌", "불꽃의돌", "천둥의돌", "물의돌", "리프의돌", "작은버섯", "큰버섯", "진주", "큰진주", "별의모래", "별의조각", "금구슬", "하트비늘", "달콤한꿀", "무럭무럭비료", "축축이비료", "오래오래비료", "끈적끈적비료", "뿌리화석", "발톱화석", "조개화석", "껍질화석", "비밀의호박", "방패의화석", "두개의화석", "귀중한뼈", "빛의돌", "어둠의돌", "각성의돌", "동글동글돌", "쐐기돌", "백금옥", "차", "???", "마티스의사인", "아쿠아카세트", "번개카세트", "블레이즈카세트", "프리즈카세트", "???", "포켓몬 박스", "회복포켓", "기술머신케이스", "사탕보틀", "강화포켓", "옷갈아입기트렁크", "포획포켓", "배틀포켓", "???", "???", "???", "???", "???", "하트스위트", "금강옥", "백옥", "첫메일", "애호메일", "권유메일", "감사메일", "질문메일", "추천메일", "답장메일", "브리지메일S", "브리지메일M", "브리지메일C", "브리지메일V", "브리지메일W", "버치열매", "유루열매", "복슝열매", "복분열매", "배리열매", "과사열매", "오랭열매", "시몬열매", "리샘열매", "자뭉열매", "무화열매", "위키열매", "마고열매", "아바열매", "파야열매", "라즈열매", "블리열매", "나나열매", "서배열매", "파인열매", "유석열매", "시마열매", "파비열매", "로매열매", "또뽀열매", "토망열매", "수숙열매", "고스티열매", "라부탐열매", "노멜열매", "메호키열매", "자야열매", "슈박열매", "두리열매", "루베열매", "오카열매", "꼬시개열매", "초나열매", "린드열매", "플카열매", "로플열매", "으름열매", "슈캐열매", "바코열매", "야파열매", "리체열매", "루미열매", "수불열매", "하반열매", "마코열매", "바리비열매", "카리열매", "치리열매", "용아열매", "캄라열매", "야타비열매", "규살열매", "랑사열매", "스타열매", "의문열매", "미클열매", "애슈열매", "자보열매", "애터열매", "반짝가루", "하양허브", "교정깁스", "학습장치", "선제공격손톱", "평온의방울", "멘탈허브", "구애머리띠", "왕의징표석", "은빛가루", "부적금화", "순결의부적", "마음의물방울", "심해의이빨", "심해의비늘", "연막탄", "변함없는돌", "기합의머리띠", "행복의알", "초점렌즈", "금속코트", "먹다남은음식", "용의비늘", "전기구슬", "부드러운모래", "딱딱한돌", "기적의씨", "검은안경", "검은띠", "자석", "신비의물방울", "예리한부리", "독바늘", "녹지않는얼음", "저주의부적", "휘어진스푼", "목탄", "용의이빨", "실크스카프", "업그레이드", "조개껍질방울", "바닷물향로", "무사태평향로", "럭키펀치", "금속파우더", "굵은뼈", "대파", "빨강밴드", "파랑밴드", "분홍밴드", "초록밴드", "노랑밴드", "광각렌즈", "힘의머리띠", "박식안경", "달인의띠", "빛의점토", "생명의구슬", "파워풀허브", "맹독구슬", "화염구슬", "스피드파우더", "기합의띠", "포커스렌즈", "메트로놈", "검은철구", "느림보꼬리", "빨간실", "검은진흙", "차가운바위", "보송보송바위", "뜨거운바위", "축축한바위", "끈기갈고리손톱", "구애스카프", "끈적끈적바늘", "파워리스트", "파워벨트", "파워렌즈", "파워밴드", "파워앵클릿", "파워웨이트", "아름다운허물", "큰뿌리", "구애안경", "불구슬플레이트", "물방울플레이트", "우뢰플레이트", "초록플레이트", "고드름플레이트", "주먹플레이트", "맹독플레이트", "대지플레이트", "푸른하늘플레이트", "이상한플레이트", "비단벌레플레이트", "암석플레이트", "원령플레이트", "용의플레이트", "공포플레이트", "강철플레이트", "괴상한향로", "암석향로", "만복향로", "잔물결향로", "꽃향로", "행운의향로", "순결의향로", "프로텍터", "에레키부스터", "마그마부스터", "괴상한패치", "영계의천", "예리한손톱", "예리한이빨", "기술머신01", "기술머신02", "기술머신03", "기술머신04", "기술머신05", "기술머신06", "기술머신07", "기술머신08", "기술머신09", "기술머신10", "기술머신11", "기술머신12", "기술머신13", "기술머신14", "기술머신15", "기술머신16", "기술머신17", "기술머신18", "기술머신19", "기술머신20", "기술머신21", "기술머신22", "기술머신23", "기술머신24", "기술머신25", "기술머신26", "기술머신27", "기술머신28", "기술머신29", "기술머신30", "기술머신31", "기술머신32", "기술머신33", "기술머신34", "기술머신35", "기술머신36", "기술머신37", "기술머신38", "기술머신39", "기술머신40", "기술머신41", "기술머신42", "기술머신43", "기술머신44", "기술머신45", "기술머신46", "기술머신47", "기술머신48", "기술머신49", "기술머신50", "기술머신51", "기술머신52", "기술머신53", "기술머신54", "기술머신55", "기술머신56", "기술머신57", "기술머신58", "기술머신59", "기술머신60", "기술머신61", "기술머신62", "기술머신63", "기술머신64", "기술머신65", "기술머신66", "기술머신67", "기술머신68", "기술머신69", "기술머신70", "기술머신71", "기술머신72", "기술머신73", "기술머신74", "기술머신75", "기술머신76", "기술머신77", "기술머신78", "기술머신79", "기술머신80", "기술머신81", "기술머신82", "기술머신83", "기술머신84", "기술머신85", "기술머신86", "기술머신87", "기술머신88", "기술머신89", "기술머신90", "기술머신91", "기술머신92", "비전머신01", "비전머신02", "비전머신03", "비전머신04", "비전머신05", "비전머신06", "???", "???", "탐험세트", "보물주머니", "룰북", "포켓트레", "포인트카드", "모험노트", "실상자", "액세서리상자", "실주머니", "친구수첩", "발전소키", "고대의부적", "갤럭시단의열쇠", "빨강쇠사슬", "타운맵", "배틀서처", "동전케이스", "낡은낚싯대", "좋은낚싯대", "대단한낚싯대", "고라파덕물뿌리개", "포핀케이스", "자전거", "룸키", "오박사의편지", "초승달날개", "멤버스카드", "천계의피리", "승선티켓", "콘테스트패스", "화산의돌", "전해줄물건", "교환권1", "교환권2", "교환권3", "창고열쇠", "비전신약", "배틀레코더", "그라시데아꽃", "비밀의열쇠", "규토리케이스", "안농노트", "나무열매플랜터", "다우징머신", "블루카드", "맛있는꼬리", "크리스탈방울", "카드키", "지하의열쇠", "꼬부기물뿌리개", "빨간비늘", "분실물", "리니어패스", "기계부품", "은빛날개", "무지갯빛날개", "이상한알", "빨간규토리", "파란규토리", "노랑규토리", "초록규토리", "담홍규토리", "하얀규토리", "검은규토리", "스피드볼", "레벨볼", "루어볼", "헤비볼", "러브러브볼", "프렌드볼", "문볼", "콤페볼", "파크볼", "포토앨범", "GB플레이어", "해명의방울", "분노의호두과자", "데이터카드01", "데이터카드02", "데이터카드03", "데이터카드04", "데이터카드05", "데이터카드06", "데이터카드07", "데이터카드08", "데이터카드09", "데이터카드10", "데이터카드11", "데이터카드12", "데이터카드13", "데이터카드14", "데이터카드15", "데이터카드16", "데이터카드17", "데이터카드18", "데이터카드19", "데이터카드20", "데이터카드21", "데이터카드22", "데이터카드23", "데이터카드24", "데이터카드25", "데이터카드26", "데이터카드27", "연둣빛구슬", "록캡슐", "주홍구슬", "쪽빛구슬", "수수께끼의수정", "고운비늘", "진화의휘석", "가벼운돌", "울퉁불퉁멧", "풍선", "레드카드", "겨냥표적", "조임밴드", "구근", "충전지", "탈출버튼", "불꽃주얼", "물주얼", "전기주얼", "풀주얼", "얼음주얼", "격투주얼", "독주얼", "땅주얼", "비행주얼", "에스퍼주얼", "벌레주얼", "바위주얼", "고스트주얼", "드래곤주얼", "악주얼", "강철주얼", "노말주얼", "체력날개", "근력날개", "저항력날개", "지력날개", "정신력날개", "순발력날개", "고운날개", "덮개화석", "날개화석", "리버티티켓", "딜구슬", "드림볼", "포켓풀", "굿즈케이스", "드래곤의뼈", "향기버섯", "큰금구슬", "경단진주", "혜성조각", "고대의동화", "고대의은화", "고대의금화", "고대의항아리", "고대의팔찌", "고대의석상", "고대의왕관", "구름아이스", "크리티컬커터2", "스피드업2", "스페셜업2", "스페셜가드2", "디펜드업2", "플러스파워2", "잘-맞히기2", "스피드업3", "스페셜업3", "스페셜가드3", "디펜드업3", "플러스파워3", "잘-맞히기3", "스피드업6", "스페셜업6", "스페셜가드6", "디펜드업6", "플러스파워6", "잘-맞히기6", "스킬콜", "아이템드롭", "아이템콜", "플랫콜", "크리티컬커터3", "라이트스톤", "다크스톤", "기술머신93", "기술머신94", "기술머신95", "라이브캐스터", "???", "배달물1", "배달물2", "배달물3", "라이브캐스터", "메달박스", "유전자쐐기", "유전자쐐기", "허가증", "둥근부적", "빛나는부적", "플라스마카드", "더러운손수건", "아크로마머신", "잊은물건", "잊은물건", "비추는거울", "약점보험", "돌격조끼", "홀로캐스터", "박사의편지", "롤러스케이트", "정령플레이트", "특성캡슐", "휘핑팝", "향기주머니", "빛이끼", "눈덩이", "방진고글", "포켓몬피리", "주렁주렁비료", "깜놀비료", "부쩍부쩍비료", "기절초풍비료", "팬텀나이트", "가디안나이트", "전룡나이트", "이상해꽃나이트", "리자몽나이트X", "거북왕나이트", "뮤츠나이트X", "뮤츠나이트Y", "번치코나이트", "요가램나이트", "헬가나이트", "보스로라나이트", "다크펫나이트", "마기라스나이트", "핫삼나이트", "쁘사이저나이트", "프테라나이트", "루카리오나이트", "눈설왕나이트", "캥카나이트", "갸라도스나이트", "앱솔나이트", "리자몽나이트Y", "후디나이트", "헤라크로스나이트", "입치트나이트", "썬더볼트나이트", "한카리아스나이트", "라티아스나이트", "라티오스나이트", "로셀열매", "악키열매", "타라프열매", "연꽃몬물뿌리개", "기술머신96", "기술머신97", "기술머신98", "기술머신99", "기술머신100", "발전소패스", "메가링", "대단할듯한돌", "흔해빠진돌", "바겐세일티켓", "엘리베이터키", "TMV패스", "칼로스엠블럼", "탐험수칙", "이상한장식품", "렌즈케이스", "코스메틱파우치", "의상트렁크", "미르갈레트", "사라사블레", "턱화석", "지느러미화석", "핸섬티켓", "자전거", "홀로캐스터", "페어리주얼", "메가참", "메가글러브", "마하자전거", "더트자전거", "고래왕자물뿌리개", "데봉화물", "재주머니", "지하열쇠", "포켓몬스넥키트", "성호에게줄편지", "무한티켓", "탐지기", "고고고글", "운석", "1호실열쇠", "2호실열쇠", "4호실열쇠", "6호실열쇠", "창고열쇠", "데봉스코프", "승선티켓", "비전머신07", "데봉봄베", "라이브슈트", "라이브드레스", "마그마슈트", "아쿠아슈트", "페어티켓", "메가뱅글", "메가펜던트", "메가글라스", "메가앵커", "메가라펠핀", "메가티아러", "메가앵클릿", "운석", "대짱이나이트", "나무킹나이트", "깜까미나이트", "파비코리나이트", "엘레이드나이트", "다부니나이트", "메타그로스나이트", "샤크니아나이트", "야도란나이트", "강철톤나이트", "피죤투나이트", "얼음귀신나이트", "디안시나이트", "굴레의항아리", "메가블레스", "폭타나이트", "이어롭나이트", "보만다나이트", "독침붕나이트", "운석", "운석", "키스톤", "운석조각", "무한의피리", "노말Z", "불꽃Z", "물Z", "전기Z", "풀Z", "얼음Z", "격투Z", "독Z", "땅Z", "비행Z", "에스퍼Z", "벌레Z", "바위Z", "고스트Z", "드래곤Z", "악Z", "강철Z", "페어리Z", "피카츄Z", "은왕관", "금왕관", "Z링", "모크나이퍼Z", "어흥염Z", "누리레느Z", "카푸Z", "마샤도Z", "알로라이Z", "잠만보Z", "이브이Z", "뮤Z", "노말Z", "불꽃Z", "물Z", "전기Z", "풀Z", "얼음Z", "격투Z", "독Z", "땅Z", "비행Z", "에스퍼Z", "벌레Z", "바위Z", "고스트Z", "드래곤Z", "악Z", "강철Z", "페어리Z", "피카츄Z", "모크나이퍼Z", "어흥염Z", "누리레느Z", "카푸Z", "마샤도Z", "알로라이Z", "잠만보Z", "이브이Z", "뮤Z", "지우피카Z", "지우피카Z", "???", "???", "???", "???", "재료주머니", "낚싯대", "박사의복면", "페스티켓", "빛나는돌", "주눅구슬", "지가르데큐브", "???", "얼음의돌", "라이드기어", "울트라볼", "큰 말라사다", "다홍꿀", "진노랑꿀", "연분홍꿀", "보라꿀", "태양의피리", "달의피리", "???", "괴상한카드", "은 라즈열매", "황금 라즈열매", "은 나나열매", "황금 나나열매", "은 파인열매", "황금 파인열매", "???", "???", "???", "???", "???", "비밀의열쇠", "승선티켓", "실프스코프", "전해줄물건", "카드키", "금틀니", "엘리베이터열쇠", "그라운드코트", "방호패드", "일렉트릭시드", "사이코시드", "미스트시드", "그래스시드", "늘어난용수철", "초크돌", "유리구슬", "한쪽귀고리", "바닷가유리", "금빛잎사귀", "은빛잎사귀", "반짝반짝경단", "트로피컬조개껍질", "나뭇잎편지", "나뭇잎편지", "작은꽃다발", "???", "???", "???", "벌레유인코롱", "실버코롱", "골드코롱", "회색강정", "파이팅메모리", "플라잉메모리", "포이즌메모리", "그라운드메모리", "락메모리", "버그메모리", "고스트메모리", "스틸메모리", "파이어메모리", "워터메모리", "그래스메모리", "일렉트릭메모리", "사이킥메모리", "아이스메모리", "드래곤메모리", "다크메모리", "페어리메모리", "솔가레오Z", "루나아라Z", "울트라네크로Z", "따라큐Z", "루가루암Z", "짜랑고우거Z", "솔가레오Z", "루나아라Z", "울트라네크로Z", "따라큐Z", "루가루암Z", "짜랑고우거Z", "Z파워링", "담홍꽃잎", "주황꽃잎", "파랑꽃잎", "빨강꽃잎", "초록꽃잎", "노랑꽃잎", "보라꽃잎", "무지개꽃", "주황배지", "네크로플러스솔", "네크로플러스루나", "네크로플러스솔", "네크로플러스루나", "일리마의 노말Z", "남겨진 볼", "알부화캡슐토이", "할인캡슐토이", "용돈캡슐토이", "경험캡슐토이", "친밀도캡슐토이", "발견캡슐토이", "숨기캡슐토이", "HP회복캡슐토이", "PP회복캡슐토이", "응원캡슐토이", "잡기캡슐토이", "기력의사탕", "힘의사탕", "수비의사탕", "지식의사탕", "마음의사탕", "속도의사탕", "기력의사탕L", "힘의사탕L", "수비의사탕L", "지식의사탕L", "마음의사탕L", "속도의사탕L", "기력의사탕XL", "힘의사탕XL", "수비의사탕XL", "지식의사탕XL", "마음의사탕XL", "속도의사탕XL", "이상해씨의사탕", "파이리의사탕", "꼬부기의사탕", "캐터피의사탕", "뿔충이의사탕", "구구의사탕", "꼬렛의사탕", "깨비참의사탕", "아보의사탕", "피카츄의사탕", "모래두지의사탕", "니드런♀의사탕", "니드런♂의사탕", "삐삐의사탕", "식스테일의사탕", "푸린의사탕", "주뱃의사탕", "뚜벅쵸의사탕", "파라스의사탕", "콘팡의사탕", "디그다의사탕", "나옹의사탕", "고라파덕의사탕", "망키의사탕", "가디의사탕", "발챙이의사탕", "캐이시의사탕", "알통몬의사탕", "모다피의사탕", "왕눈해의사탕", "꼬마돌의사탕", "포니타의사탕", "야돈의사탕", "코일의사탕", "파오리의사탕", "두두의사탕", "쥬쥬의사탕", "질퍽이의사탕", "셀러의사탕", "고오스의사탕", "롱스톤의사탕", "슬리프의사탕", "크랩의사탕", "찌리리공의사탕", "아라리의사탕", "탕구리의사탕", "시라소몬의사탕", "홍수몬의사탕", "내루미의사탕", "또가스의사탕", "뿔카노의사탕", "럭키의사탕", "덩쿠리의사탕", "캥카의사탕", "쏘드라의사탕", "콘치의사탕", "별가사리의사탕", "마임맨의사탕", "스라크의사탕", "루주라의사탕", "에레브의사탕", "쁘사이저의사탕", "켄타로스의사탕", "잉어킹의사탕", "라프라스의사탕", "메타몽의사탕", "이브이의사탕", "폴리곤의사탕", "암나이트의사탕", "투구의사탕", "프테라의사탕", "잠만보의사탕", "프리져의사탕", "썬더의사탕", "파이어의사탕", "미뇽의사탕", "뮤츠의사탕", "뮤의사탕", "멜탄의사탕", "마그마의사탕", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "???", "추천장", "포켓몬 박스", "소원의별", "다이맥스 밴드", "???", "???", "낚싯대", "로토무자전거", "???", "???", "탱글탱글부어스트", "밥의통조림", "바크의통조림", "콩통조림", "식빵", "파스타", "버섯팩", "꼬리훈제", "굵은대파", "특선사과", "가느다란뼈", "포테이토팩", "물가허브팩", "채소팩", "모둠튀김", "삶은알", "캠프세트", "???", "???", "녹슨검", "녹슨방패", "화석새", "화석물고기", "화석용", "화석긴목", "딸기사탕공예", "하트사탕공예", "베리사탕공예", "네잎사탕공예", "꽃사탕공예", "스타사탕공예", "리본사탕공예", "달콤한사과", "새콤한사과", "목스프레이", "탈출팩", "통굽부츠", "허탕보험", "룸서비스", "만능우산", "경험사탕XS",
				"경험사탕S", "경험사탕M", "경험사탕L", "경험사탕XL", "다이맥스사탕", "기술레코드00", "기술레코드01", "기술레코드02", "기술레코드03", "기술레코드04", "기술레코드05", "기술레코드06", "기술레코드07", "기술레코드08", "기술레코드09", "기술레코드10", "기술레코드11", "기술레코드12", "기술레코드13", "기술레코드14", "기술레코드15", "기술레코드16", "기술레코드17", "기술레코드18", "기술레코드19", "기술레코드20", "기술레코드21", "기술레코드22", "기술레코드23", "기술레코드24", "기술레코드25", "기술레코드26", "기술레코드27", "기술레코드28", "기술레코드29", "기술레코드30", "기술레코드31", "기술레코드32", "기술레코드33", "기술레코드34", "기술레코드35", "기술레코드36", "기술레코드37", "기술레코드38", "기술레코드39", "기술레코드40", "기술레코드41", "기술레코드42", "기술레코드43", "기술레코드44", "기술레코드45", "기술레코드46", "기술레코드47", "기술레코드48", "기술레코드49", "기술레코드50", "기술레코드51", "기술레코드52", "기술레코드53", "기술레코드54", "기술레코드55", "기술레코드56", "기술레코드57", "기술레코드58", "기술레코드59", "기술레코드60", "기술레코드61", "기술레코드62", "기술레코드63", "기술레코드64", "기술레코드65", "기술레코드66", "기술레코드67", "기술레코드68", "기술레코드69", "기술레코드70", "기술레코드71", "기술레코드72", "기술레코드73", "기술레코드74", "기술레코드75", "기술레코드76", "기술레코드77", "기술레코드78", "기술레코드79", "기술레코드80", "기술레코드81", "기술레코드82", "기술레코드83", "기술레코드84", "기술레코드85", "기술레코드86", "기술레코드87", "기술레코드88", "기술레코드89", "기술레코드90", "기술레코드91", "기술레코드92", "기술레코드93", "기술레코드94", "기술레코드95", "기술레코드96", "기술레코드97", "기술레코드98", "기술레코드99", "기술머신00", "외로움민트", "고집민트", "개구쟁이민트", "용감민트", "대담민트", "장난꾸러기민트", "촐랑민트", "무사태평민트", "조심민트", "의젓민트", "덜렁민트", "냉정민트", "차분민트", "얌전민트", "신중민트", "건방민트", "겁쟁이민트", "성급민트", "명랑민트", "천진난만민트", "성실민트", "소원의덩어리", "깨진포트", "이빠진포트", "대단한귀마개", "송이팩", "튼튼치즈", "스파이스세트", "신선한크림", "레토르트카레", "야자밀크", "레토르트면", "레토르트햄버그", "거대파우더", "소원의조각", "로토무자전거", "흔들림없는부적", "???", "낡은편지", "밴드의사인", "소니아의책", "???", "???", "???", "???", "???", "???", "로토무카탈로그", "★And458", "★And15", "★And337", "★And603", "★And390", "★Sgr6879", "★Sgr6859", "★Sgr6913", "★Sgr7348", "★Sgr7121", "★Sgr6746", "★Sgr7194", "★Sgr7337", "★Sgr7343", "★Sgr6812", "★Sgr7116", "★Sgr7264", "★Sgr7597", "★Del7882", "★Del7906", "★Del7852", "★Psc596", "★Psc361", "★Psc510", "★Psc437", "★Psc8773", "★Lep1865", "★Lep1829", "★Boo5340", "★Boo5506", "★Boo5435", "★Boo5602", "★Boo5733", "★Boo5235", "★Boo5351", "★Hya3748", "★Hya3903", "★Hya3418", "★Hya3482", "★Hya3845", "★Eri1084", "★Eri472", "★Eri1666", "★Eri897", "★Eri1231", "★Eri874", "★Eri1298", "★Eri1325", "★Eri984", "★Eri1464", "★Eri1393", "★Eri850", "★Tau1409", "★Tau1457", "★Tau1165", "★Tau1791", "★Tau1910", "★Tau1346", "★Tau1373", "★Tau1412", "★CMa2491", "★CMa2693", "★CMa2294", "★CMa2827", "★CMa2282", "★CMa2618", "★CMa2657", "★CMa2646", "★UMa4905", "★UMa4301", "★UMa5191", "★UMa5054", "★UMa4295", "★UMa4660", "★UMa4554", "★UMa4069", "★UMa3569", "★UMa3323", "★UMa4033", "★UMa4377", "★UMa4375", "★UMa4518", "★UMa3594", "★Vir5056", "★Vir4825", "★Vir4932", "★Vir4540", "★Vir4689", "★Vir5338", "★Vir4910", "★Vir5315", "★Vir5359", "★Vir5409", "★Vir5107", "★Ari617", "★Ari553", "★Ari546", "★Ari951", "★Ori1713", "★Ori2061", "★Ori1790", "★Ori1903", "★Ori1948", "★Ori2004", "★Ori1852", "★Ori1879", "★Ori1899", "★Ori1543", "★Cas21", "★Cas168", "★Cas403", "★Cas153", "★Cas542", "★Cas219", "★Cas265", "★Cnc3572", "★Cnc3208", "★Cnc3461", "★Cnc3449", "★Cnc3429", "★Cnc3627", "★Cnc3268", "★Cnc3249", "★Com4968", "★Crv4757", "★Crv4623", "★Crv4662", "★Crv4786", "★Aur1708", "★Aur2088", "★Aur1605", "★Aur2095", "★Aur1577", "★Aur1641", "★Aur1612", "★Pav7790", "★Cet911", "★Cet681", "★Cet188", "★Cet539", "★Cet804", "★Cep8974", "★Cep8162", "★Cep8238", "★Cep8417", "★Cen5267", "★Cen5288", "★Cen551", "★Cen5459", "★Cen5460", "★CMi2943", "★CMi2845", "★Equ8131", "★Vul7405", "★UMi424", "★UMi5563", "★UMi5735", "★UMi6789", "★Crt4287", "★Lyr7001", "★Lyr7178", "★Lyr7106", "★Lyr7298", "★Ara6585", "★Sco6134", "★Sco6527", "★Sco6553", "★Sco5953", "★Sco5984", "★Sco6508", "★Sco6084", "★Sco5944", "★Sco6630", "★Sco6027", "★Sco6247", "★Sco6252", "★Sco5928", "★Sco6241", "★Sco6165", "★Tri544", "★Leo3982", "★Leo4534", "★Leo4357", "★Leo4057", "★Leo4359", "★Leo4031", "★Leo3852", "★Leo3905", "★Leo3773", "★Gru8425", "★Gru8636", "★Gru8353", "★Lib5685", "★Lib5531", "★Lib5787", "★Lib5603", "★Pup3165", "★Pup3185", "★Pup3045", "★Cyg7924", "★Cyg7417", "★Cyg7796", "★Cyg8301", "★Cyg7949", "★Cyg7528", "★Oct7228", "★Col1956", "★Col2040", "★Col2177", "★Gem2990", "★Gem2891", "★Gem2421", "★Gem2473", "★Gem2216", "★Gem2777", "★Gem2650", "★Gem2286", "★Gem2484", "★Gem2930", "★Peg8775", "★Peg8781", "★Peg39", "★Peg8308", "★Peg8650", "★Peg8634", "★Peg8684", "★Peg8450", "★Peg8880", "★Peg8905", "★Oph6556", "★Oph6378", "★Oph6603", "★Oph6149", "★Oph6056", "★Oph6075", "★Ser5854", "★Ser7141", "★Ser5879", "★Her6406", "★Her6148", "★Her6410", "★Her6526", "★Her6117", "★Her6008", "★Per936", "★Per1017", "★Per1131", "★Per1228", "★Per834", "★Per941", "★Phe99", "★Phe338", "★Vel3634", "★Vel3485", "★Vel3734", "★Aqr8232", "★Aqr8414", "★Aqr8709", "★Aqr8518", "★Aqr7950", "★Aqr8499", "★Aqr8610", "★Aqr8264", "★Cru4853", "★Cru4730", "★Cru4763", "★Cru4700", "★Cru4656", "★PsA8728", "★TrA6217", "★Cap7776", "★Cap7754", "★Cap8278", "★Cap8322", "★Cap7773", "★Sge7479", "★Car2326", "★Car3685", "★Car3307", "★Car3699", "★Dra5744", "★Dra5291", "★Dra6705", "★Dra6536", "★Dra7310", "★Dra6688", "★Dra4434", "★Dra6370", "★Dra7462", "★Dra6396", "★Dra6132", "★Dra6636", "★CVn4915", "★CVn4785", "★CVn4846", "★Aql7595", "★Aql7557", "★Aql7525", "★Aql7602", "★Aql7235"]
			move_name = ["―――――", "막치기", "태권당수", "연속뺨치기", "연속펀치", "메가톤펀치", "고양이돈받기", "불꽃펀치", "냉동펀치", "번개펀치", "할퀴기", "찝기", "가위자르기", "칼바람", "칼춤", "풀베기", "바람일으키기", "날개치기", "날려버리기", "공중날기", "조이기", "힘껏치기", "덩굴채찍", "짓밟기", "두번치기", "메가톤킥", "점프킥", "돌려차기", "모래뿌리기", "박치기", "뿔찌르기", "마구찌르기", "뿔드릴", "몸통박치기", "누르기", "김밥말이", "돌진", "난동부리기", "이판사판태클", "꼬리흔들기", "독침", "더블니들", "바늘미사일", "째려보기", "물기", "울음소리", "울부짖기", "노래하기", "초음파", "소닉붐", "사슬묶기", "용해액", "불꽃세례", "화염방사", "흰안개", "물대포", "하이드로펌프", "파도타기", "냉동빔", "눈보라", "환상빔", "거품광선", "오로라빔", "파괴광선", "쪼기", "회전부리", "지옥의바퀴", "안다리걸기", "카운터", "지구던지기", "괴력", "흡수", "메가드레인", "씨뿌리기", "성장", "잎날가르기", "솔라빔", "독가루", "저리가루", "수면가루", "꽃잎댄스", "실뿜기", "용의분노", "회오리불꽃", "전기쇼크", "10만볼트", "전기자석파", "번개", "돌떨구기", "지진", "땅가르기", "구멍파기", "맹독", "염동력", "사이코키네시스", "최면술", "요가포즈", "고속이동", "전광석화", "분노", "순간이동", "나이트헤드", "흉내내기", "싫은소리", "그림자분신", "HP회복", "단단해지기", "작아지기", "연막", "이상한빛", "껍질에숨기", "웅크리기", "배리어", "빛의장막", "흑안개", "리플렉터", "기충전", "참기", "손가락흔들기", "따라하기", "자폭", "알폭탄", "핥기", "스모그", "오물공격", "뼈다귀치기", "불대문자", "폭포오르기", "껍질끼우기", "스피드스타", "로케트박치기", "가시대포", "휘감기", "망각술", "숟가락휘기", "알낳기", "무릎차기", "뱀눈초리", "꿈먹기", "독가스", "구슬던지기", "흡혈", "악마의키스", "불새", "변신", "거품", "잼잼펀치", "버섯포자", "플래시", "사이코웨이브", "튀어오르기", "녹기", "찝게햄머", "대폭발", "마구할퀴기", "뼈다귀부메랑", "잠자기", "스톤샤워", "필살앞니", "각지기", "텍스처", "트라이어택", "분노의앞니", "베어가르기", "대타출동", "발버둥", "스케치", "트리플킥", "도둑질", "거미집", "마음의눈", "악몽", "화염자동차", "코골기", "저주", "바둥바둥", "텍스처2", "에어로블라스트", "목화포자", "기사회생", "원한", "눈싸라기", "방어", "마하펀치", "겁나는얼굴", "속여때리기", "천사의키스", "배북", "오물폭탄", "진흙뿌리기", "대포무노포", "압정뿌리기", "전자포", "꿰뚫어보기", "길동무", "멸망의노래", "얼다바람", "판별", "본러쉬", "록온", "역린", "모래바람", "기가드레인", "버티기", "애교부리기", "구르기", "칼등치기", "뽐내기", "우유마시기", "스파크", "연속자르기", "강철날개", "검은눈빛", "헤롱헤롱", "잠꼬대", "치료방울", "은혜갚기", "프레젠트", "화풀이", "신비의부적", "아픔나누기", "성스러운불꽃", "매그니튜드", "폭발펀치", "메가폰", "용의숨결", "바톤터치", "앵콜", "따라가때리기", "고속스핀", "달콤한향기", "아이언테일", "메탈크로우", "받아던지기", "아침햇살", "광합성", "달의불빛", "잠재파워", "크로스촙", "회오리", "비바라기", "쾌청", "깨물어부수기", "미러코트", "자기암시", "신속", "원시의힘", "섀도볼", "미래예지", "바위깨기", "바다회오리", "집단구타", "속이다", "소란피기", "비축하기", "토해내기", "꿀꺽", "열풍", "싸라기눈", "트집", "부추기기", "도깨비불", "추억의선물", "객기", "힘껏펀치", "정신차리기", "날따름", "자연의힘", "충전", "도발", "도우미", "트릭", "역할", "희망사항", "조수", "뿌리박기", "엄청난힘", "매직코트", "리사이클", "리벤지", "깨트리다", "하품", "탁쳐서떨구기", "죽기살기", "분화", "스킬스웹", "봉인", "리프레쉬", "원념", "가로챔", "비밀의힘", "다이빙", "손바닥치기", "보호색", "반딧불", "라스트버지", "미스트볼", "깃털댄스", "흔들흔들댄스", "브레이즈킥", "흙놀이", "아이스볼", "바늘팔", "태만함", "하이퍼보이스", "독엄니", "브레이크크루", "블러스트번", "하이드로캐논", "코멧펀치", "놀래키기", "웨더볼", "아로마테라피", "거짓울음", "에어컷터", "오버히트", "냄새구별", "암석봉인", "은빛바람", "금속음", "풀피리", "간지르기", "코스믹파워", "해수스파우팅", "시그널빔", "섀도펀치", "신통력", "스카이업퍼", "모래지옥", "절대영도", "탁류", "기관총", "제비반환", "고드름침", "철벽", "블록", "멀리짖음", "드래곤크루", "하드플랜트", "벌크업", "뛰어오르다", "머드숏", "포이즌테일", "탐내다", "볼트태클", "메지컬리프", "물놀이", "명상", "리프블레이드", "용의춤", "락블레스트", "전격파", "물의파동", "파멸의소원", "사이코부스트", "날개쉬기", "중력", "미라클아이", "잠깨움뺨치기", "암해머", "자이로볼", "치유소원", "소금물", "자연의은혜", "페인트", "쪼아대기", "순풍", "경혈찌르기", "메탈버스트", "유턴", "인파이트", "보복", "승부굳히기", "금제", "내던지기", "사이코시프트", "마지막수단", "회복봉인", "쥐어짜기", "파워트릭", "위액", "주술", "선취", "흉내쟁이", "파워스웹", "가드스웹", "혼내기", "뒀다쓰기", "고민씨", "기습", "독압정", "하트스웹", "아쿠아링", "전자부유", "플레어드라이브", "발경", "파동탄", "록커트", "독찌르기", "악의파동", "깜짝베기", "아쿠아테일", "씨폭탄", "에어슬래시", "시저크로스", "벌레의야단법석", "용의파동", "드래곤다이브", "파워젬", "드레인펀치", "진공파", "기합구슬", "에너지볼", "브레이브버드", "대지의힘", "바꿔치기", "기가임팩트", "나쁜음모", "불릿펀치", "눈사태", "얼음뭉치", "섀도크루", "번개엄니", "얼음엄니", "불꽃엄니", "야습", "진흙폭탄", "사이코커터", "사념의박치기", "미러숏", "러스터캐논", "락클라임", "안개제거", "트릭룸", "용성군", "방전", "분연", "리프스톰", "파워휩", "암석포", "크로스포이즌", "더스트슈트", "아이언헤드", "마그넷봄", "스톤에지", "유혹", "스텔스록", "풀묶기", "수다", "심판의뭉치", "벌레먹음", "차지빔", "우드해머", "아쿠아제트", "공격지령", "방어지령", "회복지령", "양날박치기", "더블어택", "시간의포효", "공간절단", "초승달춤", "묵사발", "마그마스톰", "다크홀", "시드플레어", "괴상한바람", "섀도다이브", "손톱갈기", "와이드가드", "가드셰어", "파워셰어", "원더룸", "사이코쇼크", "베놈쇼크", "바디퍼지", "분노가루", "텔레키네시스", "매직룸", "떨어뜨리기", "업어후리기", "불꽃튀기기", "오물웨이브", "나비춤", "헤비봄버", "싱크로노이즈", "일렉트릭볼", "물붓기", "니트로차지", "똬리틀기", "로킥", "애시드봄", "속임수", "심플빔", "동료만들기", "당신먼저", "돌림노래", "에코보이스", "야금야금", "클리어스모그", "어시스트파워", "퍼스트가드", "사이드체인지", "열탕", "껍질깨기", "치유파동", "병상첨병", "프리폴", "기어체인지", "배대뒤치기", "불태우기", "순서미루기", "애크러뱃", "미러타입", "원수갚기", "목숨걸기", "기프트패스", "연옥", "물의맹세", "불꽃의맹세", "풀의맹세", "볼트체인지", "벌레의저항", "땅고르기", "얼음숨결", "드래곤테일", "분발", "일렉트릭네트", "와일드볼트", "드릴라이너", "더블촙", "하트스탬프", "우드호른", "성스러운칼", "셸블레이드", "히트스탬프", "그래스믹서", "하드롤러", "코튼가드", "나이트버스트", "사이코브레이크", "스위프뺨치기", "폭풍", "아프로브레이크", "기어소서", "화염탄", "테크노버스터", "옛노래", "신비의칼", "얼다세계", "뇌격", "푸른불꽃", "불꽃춤", "프리즈볼트", "콜드플레어", "바크아웃", "고드름떨구기", "V제너레이트", "크로스플레임", "크로스썬더", "플라잉프레스", "마룻바닥세워막기", "트림", "일구기", "끈적끈적네트", "마지막일침", "고스트다이브", "핼러윈", "부르짖기", "플라스마샤워", "파라볼라차지", "숲의저주", "꽃보라", "프리즈드라이", "차밍보이스", "막말내뱉기", "뒤집어엎기", "드레인키스", "트릭가드", "플라워가드", "그래스필드", "미스트필드", "송전", "치근거리기", "요정의바람", "문포스", "폭음파", "페어리록", "킹실드", "친해지기", "비밀이야기", "다이아스톰", "스팀버스트", "다른차원홀", "물수리검", "매지컬플레임", "니들가드", "아로마미스트", "괴전파", "베놈트랩", "분진", "지오컨트롤", "자기장조작", "해피타임", "일렉트릭필드", "매지컬샤인", "축하", "손에손잡기", "초롱초롱눈동자", "볼부비부비", "적당히손봐주기", "엉겨붙기", "그로우펀치", "데스윙", "사우전드애로", "사우전드웨이브", "그라운드포스", "파멸의빛", "근원의파동", "단애의칼", "화룡점정", "다른차원러시", "울트라대시어택", "울트라대시어택", "전력무쌍격렬권", "전력무쌍격렬권", "파이널다이브클래시", "파이널다이브클래시", "애시드포이즌딜리트", "애시드포이즌딜리트", "라이징랜드오버", "라이징랜드오버", "월즈엔드폴", "월즈엔드폴", "절대포식회전참", "절대포식회전참", "무한암야로의유인", "무한암야로의유인", "초월나선연격", "초월나선연격", "다이내믹풀플레임", "다이내믹풀플레임", "슈퍼아쿠아토네이도", "슈퍼아쿠아토네이도", "블룸샤인엑스트라", "블룸샤인엑스트라", "스파킹기가볼트", "스파킹기가볼트", "맥시멈사이브레이커", "맥시멈사이브레이커", "레이징지오프리즈", "레이징지오프리즈", "얼티메이트드래곤번", "얼티메이트드래곤번", "블랙홀이클립스", "블랙홀이클립스", "러블리스타임팩트", "러블리스타임팩트", "필살피카슛", "모래모으기", "만나자마자", "토치카", "그림자꿰매기", "DD래리어트", "물거품아리아", "아이스해머", "플라워힐", "10만마력", "힘흡수", "솔라블레이드", "나뭇잎", "스포트라이트", "독실", "예민해지기", "어시스트기어", "지옥찌르기", "꽃가루경단", "앵커숏", "사이코필드", "덤벼들기", "불꽃채찍", "기어오르기", "불사르기", "스피드스웹", "스마트호른", "정화", "잠재댄스", "코어퍼니셔", "트로피컬킥", "지휘", "부리캐논", "스케일노이즈", "드래곤해머", "세차게휘두르기", "오로라베일", "섀도애로우즈스트라이크", "하이퍼다크크러셔", "바다의심포니", "알로라의수호자", "칠성탈혼퇴", "라이트닝서프라이드", "진심의공격", "나인이볼부스트", "오리진즈슈퍼노바", "트랩셸", "플뢰르캐논", "사이코팽", "분함의발구르기", "섀도본", "액셀록", "아쿠아브레이크", "프리즘레이저", "섀도스틸", "메테오드라이브", "섀도레이", "눈물그렁그렁", "찌리리따끔따끔", "자연의분노", "멀티어택", "1000만볼트", "깜짝헤드", "플라스마피스트", "포톤가이저", "하늘을태우는멸망의빛", "선샤인스매셔", "문라이트블래스터", "투닥투닥프렌드타임", "레이디얼에지스톰", "브레이징소울비트", "파찌파찌액셀", "참방참방서핑", "둥실둥실폴", "피카피카썬더", "생생버블", "찌릿찌릿일렉", "이글이글번", "콸콸오라", "아그아그존", "쑥쑥봄버", "꽁꽁프로스트", "반짝반짝스톰", "브이브이브레이크", "더블펀처", "다이월", "다이맥스포", "노려맞히기", "물고버티기", "볼가득넣기", "배수의진", "타르숏", "마법가루", "드래곤애로", "다과회", "문어굳히기", "전격부리", "아가미물기", "코트체인지", "다이번", "다이웜", "다이썬더", "다이어택", "다이너클", "다이할로우", "다이아이스", "다이애시드", "다이스트림", "다이제트", "다이페어리", "다이드라군", "다이사이코", "다이록", "다이어스", "다이아크", "다이그래스", "다이스틸", "소울비트", "바디프레스", "데코레이션", "드럼어택", "집게덫", "화염볼", "거수참", "거수탄", "오라휠", "와이드브레이커", "가지찌르기", "오버드라이브", "사과산", "G의힘", "소울크래시", "원더스팀", "생명의물방울", "블로킹", "사죄의찌르기", "스타어설트", "무한다이빔", "철제광선"]

			await userChannel.send(userid + "```" + pokemon_string + " @ " + item_name[item] +
				"\n성별: " + gender_name[gender] +
				"\n경험치: " + str(exp) +
				"\n다이맥스 레벨: " + str(Dlevel) +
				"\n개체값: " + str(iv[0]) + "/" + str(iv[1]) + "/" + str(iv[2]) + "/" + str(iv[3]) + "/" + str(iv[4]) + "/" + str(iv[5]) + 
				"\n노력치: " + str(ev[0]) + "/" + str(ev[1]) + "/" + str(ev[2]) + "/" + str(ev[3]) + "/" + str(ev[4]) + "/" + str(ev[5]) + 
				"\n특성: " + ability_name[ability] +
				"\n이로치: " + shiny_name[shiny] +
				"\n성격: " + nature_name[nature] +
				"\n스탯 성격: " + nature_name[statnature] +
				"\n" + move_name[move[0]] + "/" + move_name[move[1]] + "/" + move_name[move[2]] + "/" + move_name[move[3]] +
				"\n\n어버이: " + OT +
				"\nTID: " + str(TID).zfill(6) +
				"\nSID: " + str(round(SID)).zfill(4) + 
				"\nPID: " + str(hex(PID)) +
				"\nEC: " + str(hex(EC)) + "```")
			
			time.sleep(1.0)
			await userChannel.send("대기열에 남은 사람은 총 " + str(q.size()) + "명입니다.")
		
		else:
			await userChannel.send(userid + "님의 포켓몬 데이터를 읽을 수가 없습니다. 다른 포켓몬으로 시도해주시면 감사하겠습니다. 대기열에 남은 사람은 총 " + str(q.size()) + "명입니다.")
			return 0

	#남은 사람 리스트를 제출합니다.
	@commands.command(name="리스트")
	async def sendList2(self, ctx):
		await self.sendList(ctx, 0)

	#comm.bin 의 파일을 읽어 현재 켜져있는 봇을 체크함.
	@commands.command(name="봇")
	async def sendStatus(self, ctx):
		a = 0
		if is1on():
			a += 1
		if is2on():
			a += 1
		await ctx.send("현재 " + str(a) + "개의 봇용 닌텐도 스위치가 켜져 있습니다.")

	#리스트와 같은 코드.
	@commands.command(name="대기열")
	async def sendList3(self, ctx):
		await self.sendList(ctx, 0)

	@commands.command(name="GetQueue")
	async def sendList4(self, ctx):
		await self.sendList(ctx, 1)
	
	@commands.command(name="취소")
	async def queueCancel(self, ctx):
		await self.cancelQueue(ctx, 0)

	@commands.command(name="TradeCancel")
	async def queueCancel2(self, ctx):
		await self.cancelQueue(ctx, 1)

	@commands.command(name="tradecancel")
	async def queueCancel3(self, ctx):
		await self.cancelQueue(ctx, 1)

	#일반적인 시드체크
	@commands.command(name="시드체크")
	async def checkMySeed(self, ctx):
		await self.addList(ctx, 0, 0)

	#자세히 체크 코드
	@commands.command(name="자세히체크")
	async def checkMySeed2(self, ctx):
		await self.addList(ctx, 1, 0)

	#정보 체크 코드
	@commands.command(name="정보체크")
	async def checkMySeed3(self, ctx):
		await self.addList(ctx, 2, 0)

	@commands.command(name="CheckMySeed")
	async def checkMySeed4(self, ctx):
		await self.addList(ctx, 0, 1)
	
	@commands.command(name="checkmyseed")
	async def checkMySeed5(self, ctx):
		await self.addList(ctx, 0, 1)

	@commands.command(name="シード検索")
	async def checkMySeed6(self, ctx):
		await self.addList(ctx, 0, 2)
	
	@commands.command(name="交換キャンセル")
	async def queueCancel4(self, ctx):
		await self.cancelQueue(ctx, 2)

	@commands.command(name="待機リスト")
	async def sendList5(self, ctx):
		await self.sendList(ctx, 2)

	#Main loop that is sending and receiving data from the dudu client
	@tasks.loop(seconds=0.1)
	async def checkDataReady(self):
		try:
			global q

			#If there is no person being served and the queue is not empty, get the next person in the queue
			#and start the dudu client
			if self.person1 == None and not q.isEmpty() and is1on():
				self.person1 = q.dequeue()
				self.id1 = self.person1.getIDString()
				self.userChannel1 = self.person1.getUserChannel()
				self.ifdetailed1 = self.person1.ifdetailed()
				self.idInt1 = self.person1.getID()
				self.user1 = self.person1.getUser()
				self.language1 = self.person1.getLanguage()
				initialize1()

			if self.person2 == None and not q.isEmpty() and is2on():
				self.person2 = q.dequeue()
				self.id2 = self.person2.getIDString()
				self.userChannel2 = self.person2.getUserChannel()
				self.ifdetailed2 = self.person2.ifdetailed()
				self.user2 = self.person2.getUser()
				self.idInt2 = self.person2.getID()
				self.language2 = self.person2.getLanguage()
				initialize2()

			#FOR 1

			#Checks if lanturn is now searching and if there is a person being served
			if checkSearchStatus1() and self.person1 != None:
				
				#Gets link code from text file
				code = getCodeString1()

				await self.user1.send("```python\n" + self.getLanguageText(self.language1, 18) + code + self.getLanguageText(self.language1, 19))
				self.msg1 = await self.userChannel1.send(self.getLanguageText(self.language1, 20) + self.user1.display_name + self.getLanguageText(self.language1, 21))


			if checkPassword1() and self.person1 != None:
				await self.msg1.delete()
				self.msg1 = await self.userChannel1.send(self.getLanguageText(self.language1, 22) + self.user1.display_name + self.getLanguageText(self.language1, 23))

			if checkTrade1() and self.person1 != None:
				await self.msg1.delete()
				self.msg1 = await self.userChannel1.send(self.getLanguageText(self.language1, 24))

			if checkMeet1() and self.person1 != None:
				username = getUserName1()
				await self.msg1.delete()
				self.msg1 = await self.userChannel1.send(self.getLanguageText(self.language1, 25) + username + self.getLanguageText(self.language1, 26))

			#Check if user has timed out and checks if a valid userChannel is present
			if checkTimeOut1() and self.userChannel1 != None:
				await self.msg1.delete()
				await self.userChannel1.send(self.id1 + self.getLanguageText(self.language1, 27) + str(q.size()) + self.getLanguageText(self.language1, 28))
				self.clearData1()

			#Check if a valid user channel is present and if the dudu client is still running
			if self.userChannel1 != None and not checkDuduStatus1():
				if self.ifdetailed1 != 2:
					await self.sendResult(1)
					time.sleep(1.0)
					self.clearData1()
					removePK81()

				else:
					await self.sendResult2(1)
					time.sleep(1.0)
					self.clearData1()
					removePK81()



			#FOR 2

			#Checks if lanturn is now searching and if there is a person being served
			if checkSearchStatus2() and self.person2 != None:
				
				#Gets link code from text file
				code = getCodeString2()

				await self.user2.send("```python\n" + self.getLanguageText(self.language2, 29) + code + self.getLanguageText(self.language2, 30))
				self.msg2 = await self.userChannel2.send(self.getLanguageText(self.language2, 31) + self.user2.display_name + self.getLanguageText(self.language2, 32))

			if checkPassword2() and self.person2 != None:
				await self.msg2.delete()
				self.msg2 = await self.userChannel2.send(self.getLanguageText(self.language2, 33) + self.user2.display_name + self.getLanguageText(self.language2, 34))

			if checkTrade2() and self.person2 != None:
				await self.msg2.delete()
				self.msg2 = await self.userChannel2.send(self.getLanguageText(self.language2, 35))

			if checkMeet2() and self.person2 != None:
				username = getUserName2()
				await self.msg2.delete()
				self.msg2 = await self.userChannel2.send(self.getLanguageText(self.language2, 36) + username + self.getLanguageText(self.language2, 37))

			#Check if user has timed out and checks if a valid userChannel is present
			if checkTimeOut2() and self.userChannel2 != None:
				await self.msg2.delete()
				await self.userChannel2.send(self.id2 + self.getLanguageText(self.language2, 38) + str(q.size()) + self.getLanguageText(self.language2, 39))
				self.clearData2()

			#Check if a valid user channel is present and if the dudu client is still running
			if self.userChannel2 != None and not checkDuduStatus2():
				if self.ifdetailed2 != 2:
					await self.sendResult(2)
					time.sleep(1.0)
					self.clearData2()
					removePK82()

				else:
					await self.sendResult2(2)
					time.sleep(1.0)
					self.clearData2()
					removePK82()
			#await ctx.send("Invoked")

		except FileNotFoundError as not_found:
			print(self.PrintException())
			if not_found.filename == 'out1.pk8':
				await self.userChannel1.send(self.id1 + self.getLanguageText(self.language1, 40) + str(q.size()) + self.getLanguageText(self.language1, 41))
				self.clearData1()
			elif not_found.filename == 'out2.pk8':
				await self.userChannel2.send(self.id2 + self.getLanguageText(self.language2, 42) + str(q.size()) + self.getLanguageText(self.language2, 43))
				self.clearData2()
	
		except Exception as e:
			print(self.PrintException())
			pass



def setup(client):
	client.add_cog(RaidCommands(client))


